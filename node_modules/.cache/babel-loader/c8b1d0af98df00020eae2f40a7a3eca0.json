{"ast":null,"code":"var _jsxFileName = \"E:\\\\github\\\\covid\\\\COVID19_amid_twitter_analysing\\\\src\\\\modules\\\\analysis.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport '../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, XAxis, YAxis, LineSeries, VerticalBarSeries, RadialChart } from 'react-vis';\nimport { searchSuburb, suburbCaseDate, stateCaseDate, suburbName, stateName, searchState, transState, twitterDate } from '../modules/scale';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Line, Bar } from 'react-chartjs-2';\nimport { strFromDate } from '../methods/DateTransfer';\nexport default function Analysis(props) {\n  const [scale, setScale] = useState('suburb');\n  const [area, setArea] = useState('ballarat');\n  const [casesData, setcasesData] = useState([]);\n  const [casesAxis, setcasesAxis] = useState([]);\n  const [avgAxis, setavgAxis] = useState([]);\n  const [avgData, setavgData] = useState([]);\n  const [barAxis, setbarAxis] = useState([]);\n  const [barData, setbarData] = useState([]);\n  const [bar2Axis, setbar2Axis] = useState([]);\n  const [bar2Data, setbar2Data] = useState([]);\n  const [date, setDate] = useState('0513');\n\n  const clearState = () => {\n    casesAxis.length = 0;\n    casesData.length = 0;\n    barAxis.length = 0;\n    barData.length = 0;\n    bar2Axis.length = 0;\n    bar2Data.length = 0;\n    avgData.length = 0;\n  };\n\n  useEffect(() => {});\n\n  const upload = (name, date) => {\n    clearState();\n\n    if (scale === 'state') {\n      try {\n        var low = transState.get(name);\n        Object.keys(props.statecases).forEach(day => {\n          try {\n            var cases = props.statecases[day][name];\n            var avg = props.stateavg[day][low];\n            setavgData(avgData => [...avgData, avg]);\n            setcasesAxis(casesAxis => [...casesAxis, day]);\n            setcasesData(casesData => [...casesData, cases]);\n          } catch (e) {}\n        });\n      } catch (e) {}\n\n      try {\n        var topic = props.statetopic[date][low];\n        topic.map((t, index) => {\n          setbarAxis(barAxis => [...barAxis, t.word]);\n          setbarData(barData => [...barData, t.num]);\n        });\n      } catch (e) {}\n\n      try {\n        var emotion = props.stateemotion[date][low];\n        emotion.map(t => {\n          setbar2Axis(bar2Axis => [...bar2Axis, t.emotion]);\n          setbar2Data(bar2Data => [...bar2Data, t.num]);\n        });\n      } catch (e) {}\n    } else if (scale === 'suburb') {\n      try {\n        var low = name.toLowerCase();\n        Object.keys(props.suburbcases).forEach(day => {\n          try {\n            var cases = props.suburbcases[day][name];\n            var avg = props.suburbavg[day][low];\n            setavgData(avgData => [...avgData, avg]);\n            setcasesAxis(casesAxis => [...casesAxis, day]);\n            setcasesData(casesData => [...casesData, cases]);\n          } catch (e) {}\n        });\n      } catch (e) {}\n\n      try {\n        var topic = props.suburbtopic[date][low];\n        console.log(\"date\" + date + \"wordddd\" + topic[0].word);\n        topic.map((t, index) => {\n          setbarAxis(barAxis => [...barAxis, t.word]);\n          setbarData(barData => [...barData, t.num]);\n        });\n      } catch (e) {}\n\n      try {\n        var emotion = props.suburbemtion[date][low];\n        emotion.map(t => {\n          setbar2Axis(bar2Axis => [...bar2Axis, t.emotion]);\n          setbar2Data(bar2Data => [...bar2Data, t.num]);\n        });\n      } catch (e) {}\n    }\n  };\n\n  const handleScaleChange = event => {\n    setScale(event.target.value);\n  };\n\n  const handleAreaChange = event => {\n    setArea(event.target.value);\n    upload(event.target.value, date);\n  };\n\n  const handleDateChange = event => {\n    setDate(event.target.value);\n    upload(area, event.target.value);\n  };\n\n  const timestamp = new Date('April 4 2020').getTime();\n  const ONE_DAY = 86400000;\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      style: {\n        marginTop: '140px',\n        marginLeft: '80px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      style: {\n        width: '600px',\n        height: '200px',\n        marginRight: '200px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(Line, {\n      data: {\n        labels: casesAxis,\n        datasets: [{\n          data: casesData,\n          borderColor: 'rgba(229, 115, 115, 1)',\n          fill: false,\n          label: 'cases',\n          yAxisID: 'cases'\n        }, {\n          data: avgData,\n          borderColor: '#b39ddb',\n          fill: false,\n          label: 'avg',\n          yAxisID: 'emotion'\n        }]\n      },\n      onElementsClick: elems => {\n        try {\n          var activePoint = elems[0];\n          var data = activePoint._chart.data;\n          var datasetIndex = activePoint._datasetIndex;\n          var labels = data.labels;\n          var index = activePoint._index;\n          setDate(labels[index]);\n          upload(area, labels[index]);\n        } catch (e) {}\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            id: 'cases',\n            type: 'linear',\n            position: 'left',\n            scaleLabel: {\n              display: false,\n              labelString: 'cases'\n            }\n          }, {\n            id: 'emotion',\n            type: 'linear',\n            position: 'right',\n            ticks: {\n              max: 1,\n              min: -1\n            },\n            scaleLabel: {\n              display: false,\n              labelString: 'emotion_avg'\n            }\n          }],\n          xAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: 'Date (M D)'\n            }\n          }]\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 25\n      }\n    })),\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 21\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 25\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(InputLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 29\n      }\n    }, \"Scale\"),\n    /*#__PURE__*/\n    React.createElement(Select, {\n      value: scale,\n      onChange: handleScaleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 29\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(MenuItem, {\n      value: 'suburb',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 33\n      }\n    }, \"suburb\"),\n    /*#__PURE__*/\n    React.createElement(MenuItem, {\n      value: 'state',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 33\n      }\n    }, \"state\"))),\n    /*#__PURE__*/\n    React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 25\n      }\n    }),\n    /*#__PURE__*/\n    React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 25\n      }\n    }),\n    /*#__PURE__*/\n    React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 25\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(InputLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 29\n      }\n    }, \"Area\"),\n    /*#__PURE__*/\n    React.createElement(Select, {\n      value: area,\n      onChange: handleAreaChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 29\n      }\n    }, scale === 'state' && stateName.map((key, i) =>\n    /*#__PURE__*/\n    React.createElement(MenuItem, {\n      key: i,\n      value: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 37\n      }\n    }, key)), scale === 'suburb' && suburbName.map((key, i) =>\n    /*#__PURE__*/\n    React.createElement(MenuItem, {\n      key: i,\n      value: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 37\n      }\n    }, key)))),\n    /*#__PURE__*/\n    React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 25\n      }\n    }),\n    /*#__PURE__*/\n    React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 25\n      }\n    }),\n    /*#__PURE__*/\n    React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 25\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(InputLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 29\n      }\n    }, \"Date\"),\n    /*#__PURE__*/\n    React.createElement(Select, {\n      value: date,\n      onChange: handleDateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 29\n      }\n    }, twitterDate.map(key =>\n    /*#__PURE__*/\n    React.createElement(MenuItem, {\n      value: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 37\n      }\n    }, key)))))),\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        marginTop: '120px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      style: {\n        width: '800px',\n        height: '200px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(Bar, {\n      data: {\n        labels: barAxis,\n        datasets: [{\n          data: barData,\n          backgroundColor: '#b39ddb',\n          fill: false,\n          label: 'twitter topic'\n        }]\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            ticks: {\n              min: 0\n            }\n          }]\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 21\n      }\n    })),\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      style: {\n        width: '600px',\n        height: '200px',\n        marginLeft: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 21\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(Bar, {\n      data: {\n        labels: bar2Axis,\n        datasets: [{\n          data: bar2Data,\n          backgroundColor: '#b39ddb',\n          fill: false,\n          label: 'twitter emotion'\n        }]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 25\n      }\n    }))),\n    /*#__PURE__*/\n    React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }\n    })))\n  );\n}","map":{"version":3,"sources":["E:/github/covid/COVID19_amid_twitter_analysing/src/modules/analysis.jsx"],"names":["React","useState","useEffect","XYPlot","XAxis","YAxis","LineSeries","VerticalBarSeries","RadialChart","searchSuburb","suburbCaseDate","stateCaseDate","suburbName","stateName","searchState","transState","twitterDate","FormControl","InputLabel","Select","MenuItem","Typography","Line","Bar","strFromDate","Analysis","props","scale","setScale","area","setArea","casesData","setcasesData","casesAxis","setcasesAxis","avgAxis","setavgAxis","avgData","setavgData","barAxis","setbarAxis","barData","setbarData","bar2Axis","setbar2Axis","bar2Data","setbar2Data","date","setDate","clearState","length","upload","name","low","get","Object","keys","statecases","forEach","day","cases","avg","stateavg","e","topic","statetopic","map","t","index","word","num","emotion","stateemotion","toLowerCase","suburbcases","suburbavg","suburbtopic","console","log","suburbemtion","handleScaleChange","event","target","value","handleAreaChange","handleDateChange","timestamp","Date","getTime","ONE_DAY","marginTop","marginLeft","display","width","height","marginRight","labels","datasets","data","borderColor","fill","label","yAxisID","elems","activePoint","_chart","datasetIndex","_datasetIndex","_index","scales","yAxes","id","type","position","scaleLabel","labelString","ticks","max","min","xAxes","key","i","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport '../../node_modules/react-vis/dist/style.css';\r\nimport {XYPlot, XAxis, YAxis, LineSeries, VerticalBarSeries, RadialChart} from 'react-vis';\r\n\r\nimport {\r\n    searchSuburb,\r\n    suburbCaseDate,\r\n    stateCaseDate,\r\n    suburbName,\r\n    stateName,\r\n    searchState,\r\n    transState,\r\n    twitterDate,\r\n} from '../modules/scale'\r\n\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Line, Bar} from 'react-chartjs-2';\r\n\r\nimport {strFromDate} from '../methods/DateTransfer'\r\n\r\n\r\nexport default function Analysis(props) {\r\n\r\n    const [scale, setScale] = useState('suburb')\r\n    const [area, setArea] = useState('ballarat')\r\n    const [casesData, setcasesData] = useState([])\r\n    const [casesAxis, setcasesAxis] = useState([])\r\n    const [avgAxis, setavgAxis] = useState([])\r\n    const [avgData, setavgData] = useState([])\r\n\r\n\r\n    const [barAxis, setbarAxis] = useState([])\r\n    const [barData, setbarData] = useState([])\r\n\r\n    const [bar2Axis, setbar2Axis] = useState([])\r\n    const [bar2Data, setbar2Data] = useState([])\r\n\r\n\r\n    const [date, setDate] = useState('0513')\r\n\r\n    const clearState = () => {\r\n        casesAxis.length = 0\r\n        casesData.length = 0\r\n        barAxis.length = 0\r\n        barData.length = 0\r\n        bar2Axis.length = 0\r\n        bar2Data.length = 0\r\n        avgData.length=0\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n    });\r\n\r\n    const upload = (name, date) => {\r\n\r\n        clearState()\r\n\r\n\r\n        if (scale === 'state') {\r\n\r\n            try{\r\n                var low = transState.get(name)\r\n\r\n                Object.keys(props.statecases).forEach\r\n                (\r\n                    day => {\r\n                        try {\r\n                            var cases = props.statecases[day][name]\r\n                            var avg = props.stateavg[day][low]\r\n                            setavgData(avgData => [...avgData, avg]);\r\n                            setcasesAxis(casesAxis => [...casesAxis, day])\r\n                            setcasesData(casesData => [...casesData, cases]);\r\n                        }catch (e) {\r\n\r\n                        }\r\n                    })\r\n\r\n            }catch (e) {\r\n            }\r\n\r\n            try {\r\n\r\n                var topic = props.statetopic[date][low]\r\n\r\n\r\n\r\n                topic.map(\r\n                    (t,index) => {\r\n\r\n                            setbarAxis(barAxis => [...barAxis, t.word])\r\n                            setbarData(barData => [...barData, t.num])\r\n\r\n                    }\r\n                )\r\n            } catch (e) {\r\n            }\r\n\r\n\r\n            try {\r\n                var emotion = props.stateemotion[date][low]\r\n\r\n                emotion.map(\r\n                    (t) => {\r\n                        setbar2Axis(bar2Axis => [...bar2Axis, t.emotion])\r\n                        setbar2Data(bar2Data => [...bar2Data, t.num])\r\n                    }\r\n                )\r\n            } catch (e) {\r\n            }\r\n\r\n\r\n        } else if (scale === 'suburb') {\r\n\r\n\r\n            try {\r\n\r\n                var low = name.toLowerCase()\r\n\r\n                Object.keys(props.suburbcases).forEach\r\n                (\r\n                    day => {\r\n                        try {\r\n                            var cases = props.suburbcases[day][name]\r\n                            var avg = props.suburbavg[day][low]\r\n                            setavgData(avgData => [...avgData, avg]);\r\n                            setcasesAxis(casesAxis => [...casesAxis, day])\r\n                            setcasesData(casesData => [...casesData, cases]);\r\n                        }catch (e) {\r\n\r\n                        }\r\n                })\r\n\r\n            } catch (e) {\r\n\r\n            }\r\n\r\n            try {\r\n\r\n                var topic = props.suburbtopic[date][low]\r\n\r\n                console.log(\"date\"+date+\"wordddd\"+topic[0].word)\r\n\r\n                topic.map(\r\n                    (t,index) => {\r\n\r\n                        setbarAxis(barAxis => [...barAxis, t.word])\r\n                        setbarData(barData => [...barData, t.num])\r\n\r\n                    }\r\n                )\r\n            } catch (e) {\r\n\r\n            }\r\n\r\n\r\n            try {\r\n                var emotion = props.suburbemtion[date][low]\r\n\r\n                emotion.map(\r\n                    (t) => {\r\n                        setbar2Axis(bar2Axis => [...bar2Axis, t.emotion])\r\n                        setbar2Data(bar2Data => [...bar2Data, t.num])\r\n                    }\r\n                )\r\n            } catch (e) {\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    const handleScaleChange = (event) => {\r\n        setScale(event.target.value)\r\n    };\r\n\r\n    const handleAreaChange = (event) => {\r\n        setArea(event.target.value)\r\n        upload(event.target.value, date)\r\n    };\r\n    const handleDateChange = (event) => {\r\n        setDate(event.target.value)\r\n        upload(area, event.target.value)\r\n    }\r\n\r\n    const timestamp = new Date('April 4 2020').getTime();\r\n    const ONE_DAY = 86400000;\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div style={{marginTop: '140px', marginLeft: '80px'}}>\r\n                <div style={{display: 'flex'}}>\r\n                    <div style={{width: '600px', height: '200px', marginRight: '200px'}}>\r\n                        <Line data={{\r\n                            labels: casesAxis, datasets: [{\r\n                                data: casesData, borderColor:'rgba(229, 115, 115, 1)',fill: false, label: 'cases', yAxisID: 'cases'\r\n                            },\r\n                                {\r\n                                    data: avgData, borderColor:'#b39ddb',fill: false, label: 'avg', yAxisID: 'emotion'\r\n                                }\r\n                                ]\r\n                            }}  onElementsClick={elems => {\r\n                            try {\r\n                                var activePoint = elems[0];\r\n                                var data = activePoint._chart.data;\r\n                                var datasetIndex = activePoint._datasetIndex;\r\n                                var labels = data.labels;\r\n                                var index = activePoint._index;\r\n                                setDate(labels[index])\r\n                                upload(area, labels[index])\r\n\r\n                            } catch (e) {\r\n\r\n                            }\r\n                        }}\r\n                              options={{\r\n\r\n                            scales: {\r\n                            yAxes: [{\r\n                                id: 'cases',\r\n                                type: 'linear',\r\n                                position: 'left',\r\n                                scaleLabel: {\r\n                                    display: false,\r\n                                    labelString: 'cases'\r\n                                }\r\n                            }, {\r\n                                id: 'emotion',\r\n                                type: 'linear',\r\n                                position: 'right',\r\n                                ticks: {\r\n                                    max: 1,\r\n                                    min: -1\r\n                                },\r\n                                scaleLabel: {\r\n                                    display: false,\r\n                                    labelString: 'emotion_avg'\r\n                                }\r\n\r\n                            }],\r\n                            xAxes: [{\r\n                                scaleLabel: {\r\n                                    display: true,\r\n                                    labelString: 'Date (M D)'\r\n                                }\r\n                            }]\r\n                        }}}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <FormControl>\r\n                            <InputLabel>Scale</InputLabel>\r\n                            <Select\r\n                                value={scale}\r\n                                onChange={handleScaleChange}>\r\n                                <MenuItem value={'suburb'}>suburb</MenuItem>\r\n                                <MenuItem value={'state'}>state</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <br/>\r\n                        <br/>\r\n                        <FormControl>\r\n                            <InputLabel>Area</InputLabel>\r\n                            <Select\r\n                                value={area}\r\n                                onChange={handleAreaChange}>\r\n                                {scale === 'state' &&\r\n                                stateName.map((key, i) =>\r\n                                    <MenuItem key={i} value={key}>{key}</MenuItem>)}\r\n\r\n                                {scale === 'suburb' &&\r\n                                suburbName.map((key, i) =>\r\n                                    <MenuItem key={i} value={key}>{key}</MenuItem>)}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <br/>\r\n                        <br/>\r\n                        <FormControl >\r\n                            <InputLabel>Date</InputLabel>\r\n                            <Select\r\n                                value={date}\r\n                                onChange={handleDateChange}>\r\n                                {twitterDate.map(key =>\r\n                                    <MenuItem value={key}>{key}</MenuItem>)}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                </div>\r\n                <div style={{display:'flex', marginTop: '120px'}}>\r\n                <div style={{width: '800px', height: '200px'}}>\r\n                    <Bar data={{\r\n                        labels: barAxis, datasets: [{\r\n                            data: barData, backgroundColor: '#b39ddb',fill: false, label: 'twitter topic',\r\n                        }]\r\n                    }} options={{\r\n\r\n                        scales: {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    min: 0\r\n                                },\r\n                            }]\r\n\r\n                        }}}/>\r\n                </div>\r\n                    <div style={{width: '600px', height: '200px',marginLeft:'20px'}}>\r\n                        <Bar data={{\r\n                            labels: bar2Axis, datasets: [{\r\n                                data: bar2Data,backgroundColor: '#b39ddb', fill: false, label: 'twitter emotion',\r\n                            }]\r\n                        }}/>\r\n                    </div>\r\n                </div>\r\n                <br/>\r\n\r\n\r\n                {/*<div>\r\n                        <XYPlot\r\n                            width={1200}\r\n                            height={200}\r\n                            xType=\"ordinal\"\r\n                        >\r\n\r\n                            <LineSeries data={casesData} animation damping={9} stiffness={300} color=\"#ffcdd2\"/>\r\n                            <VerticalBarSeries data={topicData} animation damping={9} stiffness={300} color=\"blue\"/>\r\n                            <XAxis title={'Date'} tickLabelAngle={40}/>\r\n                            <YAxis title={'Cases'}/>\r\n                        </XYPlot>\r\n\r\n                        { !(casesData && casesData.length) && <Typography>Loading</Typography>}\r\n\r\n                    <div style={{marginTop:'60px'}}>\r\n                        <RadialChart\r\n                            data={Data}\r\n                            width={200}\r\n                            height={200} />\r\n                    </div>\r\n                    </div>*/}\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}